// Mocks generated by Mockito 5.4.5 from annotations
// in lessons_tasks_assignment/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i20;
import 'dart:typed_data' as _i21;

import 'package:dio/dio.dart' as _i22;
import 'package:dio/src/adapter.dart' as _i7;
import 'package:dio/src/cancel_token.dart' as _i23;
import 'package:dio/src/dio_mixin.dart' as _i9;
import 'package:dio/src/options.dart' as _i6;
import 'package:dio/src/response.dart' as _i10;
import 'package:dio/src/transformer.dart' as _i8;
import 'package:file/file.dart' as _i5;
import 'package:flutter/widgets.dart' as _i12;
import 'package:flutter_bloc/flutter_bloc.dart' as _i29;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i2;
import 'package:flutter_cache_manager/src/cache_store.dart' as _i3;
import 'package:flutter_cache_manager/src/web/web_helper.dart' as _i4;
import 'package:go_router/src/configuration.dart' as _i11;
import 'package:go_router/src/delegate.dart' as _i13;
import 'package:go_router/src/information_provider.dart' as _i14;
import 'package:go_router/src/match.dart' as _i26;
import 'package:go_router/src/parser.dart' as _i15;
import 'package:go_router/src/router.dart' as _i24;
import 'package:go_router/src/state.dart' as _i16;
import 'package:lessons_tasks_assignment/data/repositories/challenges/challenges_repository.dart'
    as _i19;
import 'package:lessons_tasks_assignment/data/repositories/concepts/concepts_repository.dart'
    as _i17;
import 'package:lessons_tasks_assignment/data/services/rest_client.dart'
    as _i18;
import 'package:lessons_tasks_assignment/domain/challenge.dart' as _i33;
import 'package:lessons_tasks_assignment/domain/concept.dart' as _i32;
import 'package:lessons_tasks_assignment/features/challenges/cubit/challenges_cubit.dart'
    as _i34;
import 'package:lessons_tasks_assignment/features/challenges/cubit/challenges_state.dart'
    as _i35;
import 'package:lessons_tasks_assignment/features/concept/cubit/concept_cubit.dart'
    as _i27;
import 'package:lessons_tasks_assignment/features/concept/cubit/concept_state.dart'
    as _i28;
import 'package:lessons_tasks_assignment/features/concepts/cubit/concepts_cubit.dart'
    as _i30;
import 'package:lessons_tasks_assignment/features/concepts/cubit/concepts_state.dart'
    as _i31;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i25;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConfig_0 extends _i1.SmartFake implements _i2.Config {
  _FakeConfig_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCacheStore_1 extends _i1.SmartFake implements _i3.CacheStore {
  _FakeCacheStore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebHelper_2 extends _i1.SmartFake implements _i4.WebHelper {
  _FakeWebHelper_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_3 extends _i1.SmartFake implements _i5.File {
  _FakeFile_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileInfo_4 extends _i1.SmartFake implements _i2.FileInfo {
  _FakeFileInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_5 extends _i1.SmartFake implements _i6.BaseOptions {
  _FakeBaseOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_6 extends _i1.SmartFake
    implements _i7.HttpClientAdapter {
  _FakeHttpClientAdapter_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_7 extends _i1.SmartFake implements _i8.Transformer {
  _FakeTransformer_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_8 extends _i1.SmartFake implements _i9.Interceptors {
  _FakeInterceptors_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_9<T1> extends _i1.SmartFake implements _i10.Response<T1> {
  _FakeResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteConfiguration_10 extends _i1.SmartFake
    implements _i11.RouteConfiguration {
  _FakeRouteConfiguration_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBackButtonDispatcher_11 extends _i1.SmartFake
    implements _i12.BackButtonDispatcher {
  _FakeBackButtonDispatcher_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouterDelegate_12 extends _i1.SmartFake
    implements _i13.GoRouterDelegate {
  _FakeGoRouterDelegate_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouteInformationProvider_13 extends _i1.SmartFake
    implements _i14.GoRouteInformationProvider {
  _FakeGoRouteInformationProvider_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouteInformationParser_14 extends _i1.SmartFake
    implements _i15.GoRouteInformationParser {
  _FakeGoRouteInformationParser_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoRouterState_15 extends _i1.SmartFake
    implements _i16.GoRouterState {
  _FakeGoRouterState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponseBody_16 extends _i1.SmartFake implements _i7.ResponseBody {
  _FakeResponseBody_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConceptsRepository_17 extends _i1.SmartFake
    implements _i17.ConceptsRepository {
  _FakeConceptsRepository_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestClient_18 extends _i1.SmartFake implements _i18.RestClient {
  _FakeRestClient_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChallengesRepository_19 extends _i1.SmartFake
    implements _i19.ChallengesRepository {
  _FakeChallengesRepository_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i2.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Config get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeConfig_0(
          this,
          Invocation.getter(#config),
        ),
      ) as _i2.Config);

  @override
  _i3.CacheStore get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeCacheStore_1(
          this,
          Invocation.getter(#store),
        ),
      ) as _i3.CacheStore);

  @override
  _i4.WebHelper get webHelper => (super.noSuchMethod(
        Invocation.getter(#webHelper),
        returnValue: _FakeWebHelper_2(
          this,
          Invocation.getter(#webHelper),
        ),
      ) as _i4.WebHelper);

  @override
  _i20.Future<_i5.File> getSingleFile(
    String? url, {
    String? key,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleFile,
          [url],
          {
            #key: key,
            #headers: headers,
          },
        ),
        returnValue: _i20.Future<_i5.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #getSingleFile,
            [url],
            {
              #key: key,
              #headers: headers,
            },
          ),
        )),
      ) as _i20.Future<_i5.File>);

  @override
  _i20.Stream<_i2.FileInfo> getFile(
    String? url, {
    String? key,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFile,
          [url],
          {
            #key: key,
            #headers: headers,
          },
        ),
        returnValue: _i20.Stream<_i2.FileInfo>.empty(),
      ) as _i20.Stream<_i2.FileInfo>);

  @override
  _i20.Stream<_i2.FileResponse> getFileStream(
    String? url, {
    String? key,
    Map<String, String>? headers,
    bool? withProgress = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileStream,
          [url],
          {
            #key: key,
            #headers: headers,
            #withProgress: withProgress,
          },
        ),
        returnValue: _i20.Stream<_i2.FileResponse>.empty(),
      ) as _i20.Stream<_i2.FileResponse>);

  @override
  _i20.Future<_i2.FileInfo> downloadFile(
    String? url, {
    String? key,
    Map<String, String>? authHeaders,
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [url],
          {
            #key: key,
            #authHeaders: authHeaders,
            #force: force,
          },
        ),
        returnValue: _i20.Future<_i2.FileInfo>.value(_FakeFileInfo_4(
          this,
          Invocation.method(
            #downloadFile,
            [url],
            {
              #key: key,
              #authHeaders: authHeaders,
              #force: force,
            },
          ),
        )),
      ) as _i20.Future<_i2.FileInfo>);

  @override
  _i20.Future<_i2.FileInfo?> getFileFromCache(
    String? key, {
    bool? ignoreMemCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileFromCache,
          [key],
          {#ignoreMemCache: ignoreMemCache},
        ),
        returnValue: _i20.Future<_i2.FileInfo?>.value(),
      ) as _i20.Future<_i2.FileInfo?>);

  @override
  _i20.Future<_i2.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileFromMemory,
          [key],
        ),
        returnValue: _i20.Future<_i2.FileInfo?>.value(),
      ) as _i20.Future<_i2.FileInfo?>);

  @override
  _i20.Future<_i5.File> putFile(
    String? url,
    _i21.Uint8List? fileBytes, {
    String? key,
    String? eTag,
    Duration? maxAge = const Duration(days: 30),
    String? fileExtension = 'file',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putFile,
          [
            url,
            fileBytes,
          ],
          {
            #key: key,
            #eTag: eTag,
            #maxAge: maxAge,
            #fileExtension: fileExtension,
          },
        ),
        returnValue: _i20.Future<_i5.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #putFile,
            [
              url,
              fileBytes,
            ],
            {
              #key: key,
              #eTag: eTag,
              #maxAge: maxAge,
              #fileExtension: fileExtension,
            },
          ),
        )),
      ) as _i20.Future<_i5.File>);

  @override
  _i20.Future<_i5.File> putFileStream(
    String? url,
    _i20.Stream<List<int>>? source, {
    String? key,
    String? eTag,
    Duration? maxAge = const Duration(days: 30),
    String? fileExtension = 'file',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putFileStream,
          [
            url,
            source,
          ],
          {
            #key: key,
            #eTag: eTag,
            #maxAge: maxAge,
            #fileExtension: fileExtension,
          },
        ),
        returnValue: _i20.Future<_i5.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #putFileStream,
            [
              url,
              source,
            ],
            {
              #key: key,
              #eTag: eTag,
              #maxAge: maxAge,
              #fileExtension: fileExtension,
            },
          ),
        )),
      ) as _i20.Future<_i5.File>);

  @override
  _i20.Future<void> removeFile(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeFile,
          [key],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> emptyCache() => (super.noSuchMethod(
        Invocation.method(
          #emptyCache,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i22.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_5(
          this,
          Invocation.getter(#options),
        ),
      ) as _i6.BaseOptions);

  @override
  set options(_i6.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_6(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i7.HttpClientAdapter);

  @override
  set httpClientAdapter(_i7.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_7(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i8.Transformer);

  @override
  set transformer(_i8.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_8(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i9.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<_i10.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i6.Options? options,
    _i23.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i6.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i23.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = 'content-length',
    Object? data,
    _i6.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i20.Future<_i10.Response<dynamic>>.value(_FakeResponse_9<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<dynamic>>);

  @override
  _i20.Future<_i10.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i6.ProgressCallback? onReceiveProgress,
    _i23.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = 'content-length',
    Object? data,
    _i6.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i20.Future<_i10.Response<dynamic>>.value(_FakeResponse_9<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<dynamic>>);

  @override
  _i20.Future<_i10.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i23.CancelToken? cancelToken,
    _i6.Options? options,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i23.CancelToken? cancelToken,
    _i6.Options? options,
    _i6.ProgressCallback? onSendProgress,
    _i6.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);

  @override
  _i20.Future<_i10.Response<T>> fetch<T>(_i6.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i20.Future<_i10.Response<T>>.value(_FakeResponse_9<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i20.Future<_i10.Response<T>>);
}

/// A class which mocks [GoRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoRouter extends _i1.Mock implements _i24.GoRouter {
  MockGoRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.RouteConfiguration get configuration => (super.noSuchMethod(
        Invocation.getter(#configuration),
        returnValue: _FakeRouteConfiguration_10(
          this,
          Invocation.getter(#configuration),
        ),
      ) as _i11.RouteConfiguration);

  @override
  set configuration(_i11.RouteConfiguration? _configuration) =>
      super.noSuchMethod(
        Invocation.setter(
          #configuration,
          _configuration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.BackButtonDispatcher get backButtonDispatcher => (super.noSuchMethod(
        Invocation.getter(#backButtonDispatcher),
        returnValue: _FakeBackButtonDispatcher_11(
          this,
          Invocation.getter(#backButtonDispatcher),
        ),
      ) as _i12.BackButtonDispatcher);

  @override
  _i13.GoRouterDelegate get routerDelegate => (super.noSuchMethod(
        Invocation.getter(#routerDelegate),
        returnValue: _FakeGoRouterDelegate_12(
          this,
          Invocation.getter(#routerDelegate),
        ),
      ) as _i13.GoRouterDelegate);

  @override
  set routerDelegate(_i13.GoRouterDelegate? _routerDelegate) =>
      super.noSuchMethod(
        Invocation.setter(
          #routerDelegate,
          _routerDelegate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.GoRouteInformationProvider get routeInformationProvider =>
      (super.noSuchMethod(
        Invocation.getter(#routeInformationProvider),
        returnValue: _FakeGoRouteInformationProvider_13(
          this,
          Invocation.getter(#routeInformationProvider),
        ),
      ) as _i14.GoRouteInformationProvider);

  @override
  set routeInformationProvider(
          _i14.GoRouteInformationProvider? _routeInformationProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #routeInformationProvider,
          _routeInformationProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.GoRouteInformationParser get routeInformationParser =>
      (super.noSuchMethod(
        Invocation.getter(#routeInformationParser),
        returnValue: _FakeGoRouteInformationParser_14(
          this,
          Invocation.getter(#routeInformationParser),
        ),
      ) as _i15.GoRouteInformationParser);

  @override
  set routeInformationParser(
          _i15.GoRouteInformationParser? _routeInformationParser) =>
      super.noSuchMethod(
        Invocation.setter(
          #routeInformationParser,
          _routeInformationParser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get overridePlatformDefaultLocation => (super.noSuchMethod(
        Invocation.getter(#overridePlatformDefaultLocation),
        returnValue: false,
      ) as bool);

  @override
  _i16.GoRouterState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGoRouterState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.GoRouterState);

  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  String namedLocation(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    String? fragment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedLocation,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #fragment: fragment,
          },
        ),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.method(
            #namedLocation,
            [name],
            {
              #pathParameters: pathParameters,
              #queryParameters: queryParameters,
              #fragment: fragment,
            },
          ),
        ),
      ) as String);

  @override
  void go(
    String? location, {
    Object? extra,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #go,
          [location],
          {#extra: extra},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void restore(_i26.RouteMatchList? matchList) => super.noSuchMethod(
        Invocation.method(
          #restore,
          [matchList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goNamed(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
    String? fragment,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #goNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
            #fragment: fragment,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<T?> push<T extends Object?>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [location],
          {#extra: extra},
        ),
        returnValue: _i20.Future<T?>.value(),
      ) as _i20.Future<T?>);

  @override
  _i20.Future<T?> pushNamed<T extends Object?>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValue: _i20.Future<T?>.value(),
      ) as _i20.Future<T?>);

  @override
  _i20.Future<T?> pushReplacement<T extends Object?>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [location],
          {#extra: extra},
        ),
        returnValue: _i20.Future<T?>.value(),
      ) as _i20.Future<T?>);

  @override
  _i20.Future<T?> pushReplacementNamed<T extends Object?>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacementNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValue: _i20.Future<T?>.value(),
      ) as _i20.Future<T?>);

  @override
  _i20.Future<T?> replace<T>(
    String? location, {
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replace,
          [location],
          {#extra: extra},
        ),
        returnValue: _i20.Future<T?>.value(),
      ) as _i20.Future<T?>);

  @override
  _i20.Future<T?> replaceNamed<T>(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    Object? extra,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceNamed,
          [name],
          {
            #pathParameters: pathParameters,
            #queryParameters: queryParameters,
            #extra: extra,
          },
        ),
        returnValue: _i20.Future<T?>.value(),
      ) as _i20.Future<T?>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HttpClientAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientAdapter extends _i1.Mock implements _i7.HttpClientAdapter {
  MockHttpClientAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.Future<_i7.ResponseBody> fetch(
    _i6.RequestOptions? options,
    _i20.Stream<_i21.Uint8List>? requestStream,
    _i20.Future<void>? cancelFuture,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [
            options,
            requestStream,
            cancelFuture,
          ],
        ),
        returnValue: _i20.Future<_i7.ResponseBody>.value(_FakeResponseBody_16(
          this,
          Invocation.method(
            #fetch,
            [
              options,
              requestStream,
              cancelFuture,
            ],
          ),
        )),
      ) as _i20.Future<_i7.ResponseBody>);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConceptCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockConceptCubit extends _i1.Mock implements _i27.ConceptCubit {
  MockConceptCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.ConceptsRepository get conceptsRepository => (super.noSuchMethod(
        Invocation.getter(#conceptsRepository),
        returnValue: _FakeConceptsRepository_17(
          this,
          Invocation.getter(#conceptsRepository),
        ),
      ) as _i17.ConceptsRepository);

  @override
  _i28.ConceptState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.dummyValue<_i28.ConceptState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i28.ConceptState);

  @override
  _i20.Stream<_i28.ConceptState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i20.Stream<_i28.ConceptState>.empty(),
      ) as _i20.Stream<_i28.ConceptState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i20.Future<void> fetchConcept(String? conceptId) => (super.noSuchMethod(
        Invocation.method(
          #fetchConcept,
          [conceptId],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  void emit(_i28.ConceptState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i29.Change<_i28.ConceptState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [ConceptsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockConceptsCubit extends _i1.Mock implements _i30.ConceptsCubit {
  MockConceptsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.ConceptsRepository get conceptsRepository => (super.noSuchMethod(
        Invocation.getter(#conceptsRepository),
        returnValue: _FakeConceptsRepository_17(
          this,
          Invocation.getter(#conceptsRepository),
        ),
      ) as _i17.ConceptsRepository);

  @override
  _i31.ConceptsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.dummyValue<_i31.ConceptsState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i31.ConceptsState);

  @override
  _i20.Stream<_i31.ConceptsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i20.Stream<_i31.ConceptsState>.empty(),
      ) as _i20.Stream<_i31.ConceptsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i20.Future<void> fetchConcepts() => (super.noSuchMethod(
        Invocation.method(
          #fetchConcepts,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  void emit(_i31.ConceptsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i29.Change<_i31.ConceptsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [ConceptsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConceptsRepository extends _i1.Mock
    implements _i17.ConceptsRepository {
  MockConceptsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.RestClient get restClient => (super.noSuchMethod(
        Invocation.getter(#restClient),
        returnValue: _FakeRestClient_18(
          this,
          Invocation.getter(#restClient),
        ),
      ) as _i18.RestClient);

  @override
  _i20.Future<List<_i32.Concept>> getConcepts() => (super.noSuchMethod(
        Invocation.method(
          #getConcepts,
          [],
        ),
        returnValue: _i20.Future<List<_i32.Concept>>.value(<_i32.Concept>[]),
      ) as _i20.Future<List<_i32.Concept>>);
}

/// A class which mocks [RestClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestClient extends _i1.Mock implements _i18.RestClient {
  MockRestClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.Future<List<_i32.Concept>> getConcepts() => (super.noSuchMethod(
        Invocation.method(
          #getConcepts,
          [],
        ),
        returnValue: _i20.Future<List<_i32.Concept>>.value(<_i32.Concept>[]),
      ) as _i20.Future<List<_i32.Concept>>);

  @override
  _i20.Future<List<_i33.Challenge>> getChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getChallenges,
          [],
        ),
        returnValue:
            _i20.Future<List<_i33.Challenge>>.value(<_i33.Challenge>[]),
      ) as _i20.Future<List<_i33.Challenge>>);
}

/// A class which mocks [ChallengesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengesCubit extends _i1.Mock implements _i34.ChallengesCubit {
  MockChallengesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.ChallengesRepository get challengesRepository => (super.noSuchMethod(
        Invocation.getter(#challengesRepository),
        returnValue: _FakeChallengesRepository_19(
          this,
          Invocation.getter(#challengesRepository),
        ),
      ) as _i19.ChallengesRepository);

  @override
  _i17.ConceptsRepository get conceptsRepository => (super.noSuchMethod(
        Invocation.getter(#conceptsRepository),
        returnValue: _FakeConceptsRepository_17(
          this,
          Invocation.getter(#conceptsRepository),
        ),
      ) as _i17.ConceptsRepository);

  @override
  String get conceptId => (super.noSuchMethod(
        Invocation.getter(#conceptId),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#conceptId),
        ),
      ) as String);

  @override
  _i35.ChallengesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.dummyValue<_i35.ChallengesState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i35.ChallengesState);

  @override
  _i20.Stream<_i35.ChallengesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i20.Stream<_i35.ChallengesState>.empty(),
      ) as _i20.Stream<_i35.ChallengesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i20.Future<void> fetchChallenges() => (super.noSuchMethod(
        Invocation.method(
          #fetchChallenges,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  void emit(_i35.ChallengesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i29.Change<_i35.ChallengesState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [ChallengesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengesRepository extends _i1.Mock
    implements _i19.ChallengesRepository {
  MockChallengesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.RestClient get restClient => (super.noSuchMethod(
        Invocation.getter(#restClient),
        returnValue: _FakeRestClient_18(
          this,
          Invocation.getter(#restClient),
        ),
      ) as _i18.RestClient);

  @override
  _i20.Future<List<_i33.Challenge>> getChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getChallenges,
          [],
        ),
        returnValue:
            _i20.Future<List<_i33.Challenge>>.value(<_i33.Challenge>[]),
      ) as _i20.Future<List<_i33.Challenge>>);
}
